{"version":3,"sources":["lib/api.js","modules/loading.js","lib/createRequestSaga.js","modules/getData.js","modules/restsData.js","modules/kakaoMap.js","components/KakaoMap.js","components/RestInfo.js","containers/Rests.js","App.js","serviceWorker.js","modules/index.js","index.js"],"names":["EXPRESSWAY_REST_AREA_BASIC_API_KEY","encodeURI","startLoading","createAction","finishLoading","loading","handleActions","state","action","payload","getApiDataSaga","type","request","SUCCESS","FAILURE","put","call","result","data","error","preResult","count","list","pageNo","numOfRows","pageSize","message","code","concat","page","produce","draft","console","log","restsSaga","GET_EXPRESSWAY_CODE","GET_RESTS_SERVICE","GET_RESTS_THEME","getExpresswayCode","getRestsService","getRestsTheme","getRestsServiceRoute","getExpresswayCodeSaga","createRequestSaga","axios","get","getRestsServiceSaga","arg","routeNo","getRestsThemeSaga","getRestsServiceRouteSaga","takeLatest","getData","actions","expresswayCode","restsService","restsTheme","serviceRoute","changeExpressway","clickRest","closeInfo","setRestsInfoData","restsData","restsInfo","selectedRouteNo","target","value","selectedRest","showInfo","setKakaoMapID","setMarkers","kakaoMap","is","markers","KakaoMap","props","restsInfoData","isExpressCodeLoading","isRestsServiceLoading","isRestsThemeLoading","isServiceRouteLoading","onClickMarker","setKakaoMap","mapRef","useRef","kakao","window","isMouseDown","isDrag","arrMarkers","useSelector","dispatch","useDispatch","setArrayMarkers","useCallback","setCurrentLocation","map","navigator","geolocation","getCurrentPosition","position","panTo","maps","LatLng","coords","latitude","longitude","alert","addEventHandle","callback","addEventListener","attachEvent","onOverlayMouseDown","onOverlayMouseMove","setMarker","restName","restCode","content","document","createElement","className","innerHTML","marker","Marker","customOverlay","CustomOverlay","yAnchor","push","overlay","setMap","event","addListener","useEffect","el","current","Map","center","level","geocoder","services","Geocoder","i","addressSearch","restAddr","status","Status","OK","y","x","length","ref","RestInfo","restInfo","onCloseInfo","onClick","theme","name","detail","item","index","key","convName","convDesc","convStartTime","convEndTime","React","memo","restsConvData","expressCodeData","restsRouteData","currentExpresswayCode","selectedRestCode","showRestInfo","onChangeExpressway","getExpresswayCodeFromFile","getRestsServiceFromAPI","getRestsThemeFromAPI","restTheme","getRestsServiceRouteFromAPI","route","mapId","setRestInfo","e","routeCode","filterdRestsInfoData","filter","uniqueRestsConvData","reduce","accumulator","currentVal","some","stdRestCd","psCode","uniqueRestsTheme","stdRestNm","svarAddr","itemNm","restItem","find","psName","psDesc","stime","etime","serviceAreaCode","replace","setRestsInfoDataStruct","onChange","expresswayCodeData","App","Boolean","location","hostname","match","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5add4030.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst EXPRESSWAY_REST_AREA_BASIC_API_KEY = encodeURI('5334093111', 'UTF-8');\r\n\r\nexport const getRestsTheme = arg => {\r\n  return axios.get(\r\n    `https://data.ex.co.kr/openapi/restinfo/restThemeList?key=${EXPRESSWAY_REST_AREA_BASIC_API_KEY}&type=json&pageNo=${arg.pageNo}&numOfRows=${arg.numOfRows}`\r\n  );\r\n};\r\nexport const getRestsServiceRoute = arg => {\r\n  return axios.get(\r\n    `https://data.ex.co.kr/openapi/business/serviceAreaRoute?key=${EXPRESSWAY_REST_AREA_BASIC_API_KEY}&type=json&numOfRows=${arg.numOfRows}&pageNo=${arg.pageNo}`\r\n  );\r\n};\r\nexport const getRestsService = arg => {\r\n  return axios.get(\r\n    `https://data.ex.co.kr/openapi/restinfo/restConvList?key=${EXPRESSWAY_REST_AREA_BASIC_API_KEY}&type=json&routeNo=${arg.routeNo}&numOfRows=${arg.numOfRows}&pageNo=${arg.pageNo}`\r\n    //   `/openapi/locationinfo/locationinfoRest?key=${EXPRESSWAY_REST_AREA_BASIC_API_KEY}&type=json&routeNo=${arg.routeNo}&numOfRows=${arg.numOfRows}&pageNo=${arg.pageNo}`\r\n  );\r\n};\r\nexport const getExpresswayCode = () => axios.get(`data/expresswayCode.json`);\r\n// export const getRestsService = arg =>\r\n//   axios.get(\r\n//     `/exopenapi/business/conveniServiceArea?serviceKey=DeQ4YZIS1Q4uUyU7Y7w1UiE6xwfNkeD3uXesjmeBW5E1HbdVinrINpvXy%2B3U8Mv7NZG3qlSRVkeqrXUk%2BOm4HQ%3D%3D&type=json&numOfRows=${arg.numOfRows}&pageNo=${arg.pageNo}`\r\n//     //`http://data.ex.co.kr/openapi/restinfo/restConvList?key=${EXPRESSWAY_REST_AREA_BASIC_API_KEY}&type=json&numOfRows=${arg.numOfRows}&pageNo=${arg.pageNo}`\r\n//   );\r\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\nexport const startLoading = createAction(START_LOADING);\r\nexport const finishLoading = createAction(FINISH_LOADING);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n  {\r\n    [START_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: true\r\n    }),\r\n    [FINISH_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: false\r\n    })\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default loading;\r\n","import { call, put } from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\nimport produce from 'immer';\r\nimport styled from 'styled-components';\r\n\r\nexport default function getApiDataSaga(type, request) {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n  if (type === 'rests/GET_EXPRESSWAY_CODE') {\r\n    return function*(action) {\r\n      yield put(startLoading(type));\r\n\r\n      try {\r\n        const result = yield call(request, action.payload);\r\n        yield put({\r\n          type: SUCCESS,\r\n          payload: result.data\r\n        });\r\n      } catch (e) {\r\n        yield put({\r\n          type: FAILURE,\r\n          payload: e,\r\n          error: true\r\n        });\r\n      }\r\n      yield put(finishLoading(type));\r\n    };\r\n  }\r\n\r\n  if (type === 'rests/GET_RESTS_SERVICE') {\r\n    return function*(action) {\r\n      yield put(startLoading(type));\r\n      try {\r\n        let result = yield call(request, action.payload);\r\n        let preResult = {\r\n          count: 0,\r\n          list: [],\r\n          pageNo: 0,\r\n          numOfRows: 0,\r\n          pageSize: 0,\r\n          message: '',\r\n          code: ''\r\n        };\r\n        preResult.list = preResult.list.concat(result.data.list);\r\n\r\n        while (result.data.pageSize > result.data.pageNo) {\r\n          const page = result.data.pageNo + 1;\r\n\r\n          result = yield call(request, {\r\n            ...action.payload,\r\n            pageNo: page\r\n          });\r\n          preResult.list = preResult.list.concat(result.data.list);\r\n        }\r\n\r\n        yield put({\r\n          type: SUCCESS,\r\n          payload: produce(result, draft => {\r\n            draft.data.list = preResult.list;\r\n          })\r\n        });\r\n      } catch (e) {\r\n        yield put({\r\n          type: FAILURE,\r\n          payload: e,\r\n          error: true\r\n        });\r\n      }\r\n      yield put(finishLoading(type));\r\n    };\r\n  }\r\n  return function*(action) {\r\n    console.log(type);\r\n    yield put(startLoading(type));\r\n    try {\r\n      let result = yield call(request, action.payload);\r\n      let preResult = {\r\n        count: 0,\r\n        list: [],\r\n        pageNo: 0,\r\n        numOfRows: 0,\r\n        pageSize: 0,\r\n        message: '',\r\n        code: ''\r\n      };\r\n      preResult.list = preResult.list.concat(result.data.list);\r\n\r\n      while (result.data.pageSize > result.data.pageNo) {\r\n        const page = result.data.pageNo + 1;\r\n\r\n        result = yield call(request, {\r\n          ...action.payload,\r\n          pageNo: page\r\n        });\r\n        preResult.list = preResult.list.concat(result.data.list);\r\n      }\r\n\r\n      yield put({\r\n        type: SUCCESS,\r\n        payload: produce(result, draft => {\r\n          draft.data.list = preResult.list;\r\n        })\r\n      });\r\n    } catch (e) {\r\n      yield put({\r\n        type: FAILURE,\r\n        payload: e,\r\n        error: true\r\n      });\r\n    }\r\n    yield put(finishLoading(type));\r\n  };\r\n}\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport * as api from '../lib/api';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\n\r\nconst GET_EXPRESSWAY_CODE = 'rests/GET_EXPRESSWAY_CODE';\r\nconst GET_EXPRESSWAY_CODE_SUCCESS = 'rests/GET_EXPRESSWAY_CODE_SUCCESS';\r\nconst GET_RESTS_SERVICE = 'rests/GET_RESTS_SERVICE';\r\nconst GET_RESTS_SERVICE_SUCCESS = 'rests/GET_RESTS_SERVICE_SUCCESS';\r\nconst GET_RESTS_THEME = 'rests/GET_RESTS_THEME';\r\nconst GET_RESTS_THEME_SUCCESS = 'rests/GET_RESTS_THEME_SUCCESS';\r\nconst GET_RESTS_SERVICE_ROUTE = 'rests/GET_RESTS_SERVICE_ROUTE';\r\nconst GET_RESTS_SERVICE_ROUTE_SUCCESS = 'rests/GET_RESTS_SERVICE_ROUTE_SUCCESS';\r\n\r\nexport const getExpresswayCode = createAction(GET_EXPRESSWAY_CODE);\r\nexport const getRestsService = createAction(GET_RESTS_SERVICE);\r\nexport const getRestsTheme = createAction(GET_RESTS_THEME);\r\nexport const getRestsServiceRoute = createAction(GET_RESTS_SERVICE_ROUTE);\r\n\r\nconst getExpresswayCodeSaga = createRequestSaga(\r\n  GET_EXPRESSWAY_CODE,\r\n  api.getExpresswayCode\r\n);\r\nconst getRestsServiceSaga = createRequestSaga(\r\n  GET_RESTS_SERVICE,\r\n  api.getRestsService\r\n);\r\nconst getRestsThemeSaga = createRequestSaga(GET_RESTS_THEME, api.getRestsTheme);\r\nconst getRestsServiceRouteSaga = createRequestSaga(\r\n  GET_RESTS_SERVICE_ROUTE,\r\n  api.getRestsServiceRoute\r\n);\r\n\r\nexport function* restsSaga() {\r\n  yield takeLatest(GET_EXPRESSWAY_CODE, getExpresswayCodeSaga);\r\n  yield takeLatest(GET_RESTS_SERVICE, getRestsServiceSaga);\r\n  yield takeLatest(GET_RESTS_THEME, getRestsThemeSaga);\r\n  yield takeLatest(GET_RESTS_THEME, getRestsServiceRouteSaga);\r\n}\r\n\r\nconst initialState = {\r\n  restsService: null,\r\n  expresswayCode: null,\r\n  restsTheme: null,\r\n  serviceRoute: null\r\n};\r\n\r\nconst getData = handleActions(\r\n  {\r\n    [GET_EXPRESSWAY_CODE_SUCCESS]: (state, actions) => {\r\n      return {\r\n        ...state,\r\n        expresswayCode: actions.payload\r\n      };\r\n    },\r\n    [GET_RESTS_SERVICE_SUCCESS]: (state, actions) => {\r\n      return {\r\n        ...state,\r\n        restsService: actions.payload.data.list\r\n      };\r\n    },\r\n    [GET_RESTS_THEME_SUCCESS]: (state, actions) => {\r\n      return {\r\n        ...state,\r\n        restsTheme: actions.payload.data.list\r\n      };\r\n    },\r\n    [GET_RESTS_SERVICE_ROUTE_SUCCESS]: (state, actions) => {\r\n      return {\r\n        ...state,\r\n        serviceRoute: actions.payload.data.list\r\n      };\r\n    }\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default getData;\r\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst SET_RESTS_INFO_DATA = 'rests/SET_REST_INFO_DATA';\r\nconst CHANGE_EXPRESSWAY = 'rests/CHANGE_EXPRESSWAY';\r\nconst CLICK_REST = 'rests/CLICK_REST';\r\nconst CLOSE_INFO = 'rests/CLOSE_INFO';\r\n\r\nexport const changeExpressway = createAction(CHANGE_EXPRESSWAY, code => code);\r\nexport const clickRest = createAction(CLICK_REST, code => code);\r\nexport const closeInfo = createAction(CLOSE_INFO);\r\nexport const setRestsInfoData = createAction(SET_RESTS_INFO_DATA);\r\n\r\nconst initialState = {\r\n  restsInfo: [],\r\n  selectedRouteNo: '',\r\n  selectedRest: '',\r\n  showInfo: false\r\n};\r\n\r\nconst restsData = handleActions(\r\n  {\r\n    [SET_RESTS_INFO_DATA]: (state, action) => {\r\n      return {\r\n        ...state,\r\n        restsInfo: action.payload\r\n      };\r\n    },\r\n    [CHANGE_EXPRESSWAY]: (state, action) => {\r\n      return {\r\n        ...state,\r\n        selectedRouteNo: action.payload.target.value\r\n      };\r\n    },\r\n    [CLICK_REST]: (state, action) => {\r\n      return {\r\n        ...state,\r\n        selectedRest: action.payload,\r\n        showInfo: true\r\n      };\r\n    },\r\n    [CLOSE_INFO]: (state, action) => {\r\n      return {\r\n        ...state,\r\n        showInfo: false\r\n      };\r\n    }\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default restsData;\r\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst SET_MAP_ID = 'kakaoMap/SET_MAP_ID';\r\nconst SET_MARKERS = 'kakaoMap/SET_MARKERS';\r\n\r\nexport const setKakaoMapID = createAction(SET_MAP_ID);\r\nexport const setMarkers = createAction(SET_MARKERS);\r\n\r\nconst initialState = {\r\n  is: null,\r\n  markers: []\r\n};\r\n\r\nconst kakaoMap = handleActions(\r\n  {\r\n    [SET_MAP_ID]: (state, action) => ({\r\n      ...state,\r\n      is: action.payload\r\n    }),\r\n    [SET_MARKERS]: (state, action) => ({\r\n      ...state,\r\n      markers: action.payload\r\n    })\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default kakaoMap;\r\n","import React, { Fragment, useEffect, useRef, useCallback } from 'react';\r\nimport './Map.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setMarkers } from '../modules/kakaoMap';\r\n\r\nconst KakaoMap = props => {\r\n  const {\r\n    restsInfoData,\r\n    isExpressCodeLoading,\r\n    isRestsServiceLoading,\r\n    isRestsThemeLoading,\r\n    isServiceRouteLoading,\r\n    onClickMarker,\r\n    setKakaoMap\r\n  } = props;\r\n  const mapRef = useRef(null);\r\n  const { kakao } = window;\r\n  //let map = useSelector(state => state.kakaoMap.is);\r\n  let isMouseDown = false;\r\n  let isDrag = false;\r\n\r\n  let arrMarkers = useSelector(state => state.kakaoMap.markers);\r\n\r\n  const dispatch = useDispatch();\r\n  const setArrayMarkers = useCallback(\r\n    markers => dispatch(setMarkers(markers)),\r\n    [dispatch]\r\n  );\r\n\r\n  // 현재 위치 중심으로 지도 이동\r\n  const setCurrentLocation = map => {\r\n    if (navigator.geolocation) {\r\n      // GPS를 지원하면\r\n      navigator.geolocation.getCurrentPosition(\r\n        position => {\r\n          map.panTo(\r\n            new kakao.maps.LatLng(\r\n              position.coords.latitude,\r\n              position.coords.longitude\r\n            )\r\n          );\r\n        },\r\n        error => {\r\n          alert('Error: ' + error.message);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  // target node에 이벤트 핸들러를 등록하는 함수\r\n  function addEventHandle(target, type, callback) {\r\n    if (target.addEventListener) {\r\n      target.addEventListener(type, callback);\r\n    } else {\r\n      target.attachEvent('on' + type, callback);\r\n    }\r\n  }\r\n\r\n  // target node에 등록된 이벤트 핸들러를 제거하는 함수\r\n  function removeEventHandle(target, type, callback) {\r\n    if (target.removeEventListener) {\r\n      target.removeEventListener(type, callback);\r\n    } else {\r\n      target.detachEvent('on' + type, callback);\r\n    }\r\n  }\r\n\r\n  // 커스텀 오버레이 드래그시 클릭 방지\r\n  const onOverlayMouseDown = () => {\r\n    isMouseDown = true;\r\n  };\r\n\r\n  // 커스텀 오버레이 드래그시 클릭 방지\r\n  const onOverlayMouseMove = () => {\r\n    isMouseDown && (isDrag = true);\r\n  };\r\n\r\n  // 마커를 표시하고 커스텀 오버레이에 이벤트 바인딩\r\n  const setMarker = (map, position, restName, restCode) => {\r\n    // 커스텀 오버레이에 표시할 내용\r\n    let content = document.createElement('div');\r\n    content.className = 'label';\r\n    content.innerHTML = restName;\r\n\r\n    // 마커 생성\r\n    const marker = new kakao.maps.Marker({\r\n      position: position\r\n    });\r\n\r\n    // 커스텀 오버레이를 생성\r\n    const customOverlay = new kakao.maps.CustomOverlay({\r\n      map: map,\r\n      position: position,\r\n      content: content,\r\n      yAnchor: 3\r\n    });\r\n\r\n    // 마커 배열에 추가\r\n    arrMarkers.push({ marker: marker, overlay: customOverlay });\r\n    // 마커가 지도 위에 표시되도록 설정\r\n    marker.setMap(map);\r\n\r\n    // 이벤트 핸들러 등록\r\n    kakao.maps.event.addListener(marker, 'click', () => {\r\n      if (!isDrag) {\r\n        onClickMarker(restCode);\r\n      }\r\n    });\r\n    addEventHandle(content, 'mousedown', onOverlayMouseDown);\r\n    addEventHandle(content, 'mousemove', onOverlayMouseMove);\r\n    addEventHandle(content, 'mouseup', () => {\r\n      isMouseDown = false;\r\n      if (!isDrag) {\r\n        onClickMarker(restCode);\r\n      }\r\n      isDrag = false;\r\n    });\r\n  };\r\n  let map;\r\n  useEffect(() => {\r\n    const el = mapRef.current;\r\n    if (\r\n      el !== null &&\r\n      isExpressCodeLoading === false &&\r\n      isRestsServiceLoading === false\r\n    ) {\r\n      map = new kakao.maps.Map(el, {\r\n        center: new kakao.maps.LatLng(37.592128000000002, 126.97942),\r\n        level: 12\r\n      });\r\n      setKakaoMap(map);\r\n\r\n      setCurrentLocation(map);\r\n    }\r\n\r\n    console.log(restsInfoData);\r\n    if (restsInfoData) {\r\n      let geocoder = new kakao.maps.services.Geocoder();\r\n      arrMarkers = [];\r\n      for (let i = 0; i < restsInfoData.length; i++) {\r\n        geocoder.addressSearch(restsInfoData[i].restAddr, function(\r\n          result,\r\n          status\r\n        ) {\r\n          if (status === kakao.maps.services.Status.OK) {\r\n            let coords = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n\r\n            setMarker(\r\n              map,\r\n              coords,\r\n              restsInfoData[i].restName,\r\n              restsInfoData[i].restCode\r\n            );\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }, [\r\n    restsInfoData,\r\n    kakao.maps.LatLng,\r\n    kakao.maps.Map,\r\n    setMarker,\r\n    setCurrentLocation,\r\n    isExpressCodeLoading,\r\n    isRestsServiceLoading,\r\n    kakao.maps.services.Geocoder,\r\n    kakao.maps.services.Status.OK\r\n  ]);\r\n  setArrayMarkers(arrMarkers);\r\n  useEffect(() => {\r\n    return () => {\r\n      for (let i = 0; i < arrMarkers.length; i++) {\r\n        arrMarkers[i].marker.setMap(null);\r\n        arrMarkers[i].overlay.setMap(null);\r\n      }\r\n    };\r\n  });\r\n  return (\r\n    <Fragment>\r\n      <div ref={mapRef} className=\"map\"></div>\r\n      {(isExpressCodeLoading || isRestsServiceLoading) && (\r\n        <div className=\"loading_overlay\">\r\n          {isExpressCodeLoading && (\r\n            <Fragment>\r\n              고속도로 코드 데이터\r\n              <br />\r\n            </Fragment>\r\n          )}\r\n          {isRestsServiceLoading && (\r\n            <Fragment>\r\n              휴게소 편의 시설 데이터\r\n              <br />\r\n            </Fragment>\r\n          )}\r\n          {isRestsThemeLoading && (\r\n            <Fragment>\r\n              휴게소 테마 데이터\r\n              <br />\r\n            </Fragment>\r\n          )}\r\n          {isServiceRouteLoading && (\r\n            <Fragment>\r\n              도로별 휴게시설 데이터\r\n              <br />\r\n            </Fragment>\r\n          )}\r\n          {` `}\r\n          로딩중...\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default KakaoMap;\r\n","import React, { Fragment } from 'react';\r\nimport './RestInfo.css';\r\nimport { MdHighlightOff } from 'react-icons/md';\r\n// props = {\r\n//   restCode: '',\r\n//   restName: '',\r\n//   restAddr: '',\r\n//   services: [\r\n//     {\r\n//       convName: '',\r\n//       convDesc: '',\r\n//       convStartTime: '',\r\n//       convEndTime: ''\r\n//     }\r\n//   ],\r\n//   theme: {\r\n//     name: '',\r\n//     detail: ''\r\n//   }\r\n// };\r\nconst RestInfo = props => {\r\n  const { restInfo, onCloseInfo } = props;\r\n  console.log(restInfo);\r\n  return restInfo ? (\r\n    <div className=\"restInfo\">\r\n      <div>\r\n        <MdHighlightOff onClick={onCloseInfo} />\r\n      </div>\r\n      <div>{restInfo.restName}</div>\r\n      <div>{restInfo.restAddr}</div>\r\n      <div>{restInfo.theme.name}</div>\r\n      <div>{restInfo.theme.detail}</div>\r\n      {restInfo.services.map((item, index) => {\r\n        return (\r\n          <div key={index}>\r\n            <div>{item.convName}</div>\r\n            <div>{item.convDesc}</div>\r\n            <div>{item.convStartTime}</div>\r\n            <div>{item.convEndTime}</div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nexport default RestInfo;\r\n","import React, { Fragment, useCallback, useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  getExpresswayCode,\r\n  getRestsService,\r\n  getRestsTheme,\r\n  getRestsServiceRoute\r\n} from '../modules/getData';\r\nimport {\r\n  changeExpressway,\r\n  clickRest,\r\n  closeInfo,\r\n  setRestsInfoData\r\n} from '../modules/restsData';\r\nimport KaKaoMap from '../components/KakaoMap';\r\nimport { setKakaoMapID } from '../modules/kakaoMap';\r\nimport RestInfo from '../components/RestInfo';\r\n\r\nconst Rests = () => {\r\n  // 리덕스 연동 시작\r\n  /****************************************************\r\n   * restsConvData : 휴게소 위치 정보\r\n   * expressCodeData : 고속도로 코드\r\n   * currentExpresswayCode : 현재 선택된 고속도로 코드\r\n   * restsServiceData : 휴게소 편의 시설 정보\r\n   * selectedRestCode : 현재 선택된 휴게소 코드\r\n   ***************************************************/\r\n  const restsTheme = useSelector(state => state.getData.restsTheme);\r\n  const restsConvData = useSelector(state => state.getData.restsService);\r\n  const expressCodeData = useSelector(state => state.getData.expresswayCode);\r\n  const restsRouteData = useSelector(state => state.getData.serviceRoute);\r\n  const currentExpresswayCode = useSelector(\r\n    state => state.restsData.selectedRouteNo\r\n  );\r\n  const selectedRestCode = useSelector(state => state.restsData.selectedRest);\r\n  const restsInfoData = useSelector(state => state.restsData.restsInfo);\r\n\r\n  const isRestsThemeLoading = useSelector(\r\n    state => state.loading['rests/GET_RESTS_THEME']\r\n  );\r\n  const isExpressCodeLoading = useSelector(\r\n    state => state.loading['rests/GET_EXPRESSWAY_CODE']\r\n  );\r\n  const isRestsServiceLoading = useSelector(\r\n    state => state.loading['rests/GET_RESTS_SERVICE']\r\n  );\r\n  const isServiceRouteLoading = useSelector(\r\n    state => state.loading['rests/GET_RESTS_SERVICE_ROUTE']\r\n  );\r\n  const showRestInfo = useSelector(state => state.restsData.showInfo);\r\n\r\n  const dispatch = useDispatch();\r\n  const onChangeExpressway = useCallback(\r\n    event => dispatch(changeExpressway(event)),\r\n    [dispatch]\r\n  );\r\n  const onClickMarker = useCallback(restCode => dispatch(clickRest(restCode)), [\r\n    dispatch\r\n  ]);\r\n\r\n  const getExpresswayCodeFromFile = useCallback(\r\n    () => dispatch(getExpresswayCode()),\r\n    [dispatch]\r\n  );\r\n  const getRestsServiceFromAPI = useCallback(\r\n    restCode => dispatch(getRestsService(restCode)),\r\n    [dispatch]\r\n  );\r\n  const getRestsThemeFromAPI = useCallback(\r\n    restTheme => dispatch(getRestsTheme(restTheme)),\r\n    [dispatch]\r\n  );\r\n  const getRestsServiceRouteFromAPI = useCallback(\r\n    route => dispatch(getRestsServiceRoute(route)),\r\n    [dispatch]\r\n  );\r\n  const setKakaoMap = useCallback(mapId => dispatch(setKakaoMapID(mapId)), [\r\n    dispatch\r\n  ]);\r\n  const onCloseInfo = useCallback(() => dispatch(closeInfo()), [dispatch]);\r\n  const setRestInfo = useCallback(data => dispatch(setRestsInfoData(data)), [\r\n    dispatch\r\n  ]);\r\n\r\n  // 리덕스 연동 끝\r\n\r\n  const ref = useRef(null);\r\n\r\n  // 데이터 구조화\r\n  // 휴게소 코드기 중복되는 데이터 삭제 및 휴게소 정보 추출\r\n  let setRestsInfoDataStruct = () => {\r\n    let result = [];\r\n    // 중복 데이터 제거\r\n    console.log(restsConvData);\r\n    let uniqueRestsConvData = restsConvData.reduce((accumulator, current) => {\r\n      if (checkIfAlreadyExist(current)) {\r\n        return accumulator;\r\n      } else {\r\n        return [...accumulator, current];\r\n      }\r\n      function checkIfAlreadyExist(currentVal) {\r\n        return accumulator.some(item => {\r\n          return (\r\n            item.stdRestCd === currentVal.stdRestCd &&\r\n            item.psCode === currentVal.psCode\r\n          );\r\n        });\r\n      }\r\n    }, []);\r\n    // 중복 데이터 제거\r\n    let uniqueRestsTheme = restsTheme.reduce((accumulator, current) => {\r\n      if (checkIfAlreadyExist(current)) {\r\n        return accumulator;\r\n      } else {\r\n        return [...accumulator, current];\r\n      }\r\n      function checkIfAlreadyExist(currentVal) {\r\n        return accumulator.some(item => {\r\n          return item.stdRestCd === currentVal.stdRestCd;\r\n        });\r\n      }\r\n    }, []);\r\n\r\n    for (let i = 0; i < uniqueRestsTheme.length; i++) {\r\n      result.push({\r\n        routeCode: '',\r\n        restCode: uniqueRestsTheme[i].stdRestCd,\r\n        restName: uniqueRestsTheme[i].stdRestNm,\r\n        restAddr: uniqueRestsTheme[i].svarAddr,\r\n        services: [],\r\n        theme: {\r\n          name: uniqueRestsTheme[i].itemNm,\r\n          detail: uniqueRestsTheme[i].detail\r\n        }\r\n      });\r\n    }\r\n\r\n    for (let i = 0; i < uniqueRestsConvData.length; i++) {\r\n      let restItem = result.find(\r\n        item =>\r\n          item.restCode === uniqueRestsConvData[i].stdRestCd &&\r\n          uniqueRestsConvData[i].stdRestNm !== null\r\n      );\r\n      if (restItem) {\r\n        restItem.services.push({\r\n          convName: uniqueRestsConvData[i].psName,\r\n          convDesc: uniqueRestsConvData[i].psDesc,\r\n          convStartTime: uniqueRestsConvData[i].stime,\r\n          convEndTime: uniqueRestsConvData[i].etime\r\n        });\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < result.length; i++) {\r\n      let restItem = restsRouteData.find(\r\n        item =>\r\n          item.serviceAreaCode !== null &&\r\n          item.serviceAreaCode.replace('A', '0') === result[i].restCode\r\n      );\r\n      if (restItem) {\r\n        result[i].routeCode = restItem.routeCode;\r\n      }\r\n    }\r\n    console.log(result);\r\n    setRestInfo(result);\r\n  };\r\n\r\n  // 고속도로 노선 선택\r\n  const onChangeSelect = e => {\r\n    onChangeExpressway(e);\r\n  };\r\n\r\n  // 고속도로 코드 로드\r\n  useEffect(() => {\r\n    try {\r\n      getExpresswayCodeFromFile();\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, [getExpresswayCodeFromFile]);\r\n\r\n  // 휴게소 편의시설 정보 로드\r\n  useEffect(() => {\r\n    try {\r\n      getRestsServiceFromAPI({\r\n        routeNo: '',\r\n        numOfRows: '300',\r\n        pageNo: ''\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, [getRestsServiceFromAPI]);\r\n\r\n  // 휴게소 도로별 시설 정보 로드\r\n  useEffect(() => {\r\n    try {\r\n      getRestsServiceRouteFromAPI({\r\n        routeNo: '',\r\n        numOfRows: '300',\r\n        pageNo: ''\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, [getRestsServiceRouteFromAPI]);\r\n\r\n  // 휴게소 테마 정보 로드\r\n  useEffect(() => {\r\n    try {\r\n      getRestsThemeFromAPI({\r\n        numOfRows: '300',\r\n        pageNo: ''\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, [getRestsThemeFromAPI]);\r\n\r\n  const filterdRestsInfo = routeCode => {\r\n    if (routeCode === '') {\r\n      return restsInfoData;\r\n    }\r\n    console.log(restsInfoData);\r\n    return restsInfoData.filter(item => item.routeCode === routeCode);\r\n  };\r\n  // 노선 선택시 데이터 필터링\r\n\r\n  const filterdRestsInfoData = filterdRestsInfo(currentExpresswayCode);\r\n  useEffect(() => {});\r\n\r\n  if (\r\n    isExpressCodeLoading === false &&\r\n    isRestsServiceLoading === false &&\r\n    isRestsThemeLoading === false &&\r\n    isServiceRouteLoading === false &&\r\n    restsInfoData.length < 1\r\n  ) {\r\n    setRestsInfoDataStruct();\r\n  }\r\n\r\n  console.log(filterdRestsInfoData);\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"expressway_select_wrapper\">\r\n        <select className=\"expressway_select\" onChange={onChangeSelect}>\r\n          <option value=\"\">전체</option>\r\n          {expressCodeData &&\r\n            expressCodeData.map(item => (\r\n              <option key={item.code} value={item.code}>\r\n                {item.name}\r\n              </option>\r\n            ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"kakaoMap\">\r\n        <KaKaoMap\r\n          restsInfoData={filterdRestsInfoData}\r\n          expresswayCodeData={expressCodeData}\r\n          isExpressCodeLoading={isExpressCodeLoading}\r\n          isRestsServiceLoading={isRestsServiceLoading}\r\n          isRestsThemeLoading={isRestsThemeLoading}\r\n          isServiceRouteLoading={isServiceRouteLoading}\r\n          onClickMarker={onClickMarker}\r\n          setKakaoMap={setKakaoMap}\r\n        />\r\n      </div>\r\n      {restsInfoData && showRestInfo && (\r\n        <RestInfo\r\n          restInfo={filterdRestsInfoData.find(\r\n            item => item.restCode === selectedRestCode\r\n          )}\r\n          onCloseInfo={onCloseInfo}\r\n        ></RestInfo>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default React.memo(Rests);\r\n","import React from 'react';\nimport './App.css';\nimport Rests from './containers/Rests';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Rests />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport loading from './loading';\r\nimport getData, { restsSaga } from './getData';\r\nimport restsData from './restsData';\r\nimport kakaoMap from './kakaoMap';\r\n\r\nconst rootReducer = combineReducers({\r\n  loading,\r\n  getData,\r\n  restsData,\r\n  kakaoMap\r\n});\r\n\r\nexport function* rootSaga() {\r\n  yield all([restsSaga()]);\r\n}\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer, { rootSaga } from './modules';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}